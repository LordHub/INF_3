fmod BATTERY-HASKELL is
	sorts Cell Battery .

	op o : -> Cell  .
	op + : -> Cell  .
	op - : -> Cell  .
	op nil : -> Battery .
	op _^_ : Cell Battery -> Battery .
	op consume : Battery -> Battery .

	var Bt : Battery . 
	
	eq consume(o ^ Bt ) = + ^ Bt .
	eq consume(+ ^ Bt ) = - ^ Bt .
	eq consume(- ^ Bt ) = - ^ consume (Bt) .
endfm

fmod BATTERY-MAUDE is
sorts Cell ECell Battery EBattery .
subsorts ECell < Cell < Battery .
subsorts ECell < EBattery < Battery .
op o : -> Cell  .
op + : -> Cell  .
op - : -> ECell  .
op nil : -> EBattery  .
op _^_ : EBattery EBattery -> EBattery [assoc id: nil] .
op _^_ : Battery Battery -> Battery [assoc id: nil] .
op consume : Battery -> Battery .
var Bt : Battery . var EBt : EBattery .
eq consume(EBt ^ o ^ Bt) = EBt ^ + ^ Bt .
eq consume(EBt ^ + ^ Bt) = EBt ^ - ^ Bt .
eq consume(Bt) = Bt [owise] .
endfm


fmod BATTERY-EXT is
	protecting BATTERY-MAUDE .
	protecting BOOL .
	protecting NAT .

	op charge : Battery -> Nat .

	var EBt : EBattery .
	var Bt : Battery .

	eq charge(EBt) = 0 .
	eq charge(EBt ^ o ^ Bt) = 100 + charge(Bt) .
	eq charge(EBt ^ + ^ Bt) = 50 + charge(Bt) .
endfm

fmod BATTERY-MAUDE is
	sorts Cell ECell Battery EBattery .
	subsorts ECell < Cell < Battery .
	subsorts ECell < EBattery < Battery .

	op o : -> Cell  .
	op + : -> Cell  .
	op - : -> ECell  .
	op nil : -> EBattery  .
	op _^_ : EBattery EBattery -> EBattery [assoc id: nil] .
	op _^_ : Battery Battery -> Battery [assoc id: nil] .
	op consume : Battery -> Battery .

	var Bt : Battery . var EBt : EBattery .

	eq consume(EBt ^ o ^ Bt) = EBt ^ + ^ Bt .
	eq consume(EBt ^ + ^ Bt) = EBt ^ - ^ Bt .
	eq consume(Bt) = Bt [owise] .
endfm

fmod BATTERY-ALL is
	protecting BATTERY-MAUDE .
    protecting BATTERY-EXT .
	protecting NAT .
	protecting BOOL .

	op size : Battery -> Nat .
	op half-charge? : Battery -> Bool .
	
	var EBt : EBattery .
	var Bt : Battery .
	var Bcell : Cell .

	eq size (nil) = 0 .
	eq size (EBt ^ Bcell ^ Bt) = 1 + size (Bt) .

	eq half-charge? (nil) = false .
    ceq half-charge? (Bt) = true if charge(Bt) quo size (Bt) >= 50 .
	 eq half-charge? (Bt) = false [owise] .
		
endfm
